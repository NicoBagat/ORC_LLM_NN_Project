steps:
  generate_training_data: true
  train_neural_network: true
  run_mpc_with_nn: true


ocp:
  state_dim: 2 # For single pendulum: [angle, angular_velocity]; For double pendulum: [angle1, angular_velocity1, angle2, angular_velocity2]
  control_dim: 1 # Control input dimension (torque applied to the pendulum)
  horizon: 20 # Horizon length for generating training data
  dt: 0.05 # Time step for discretization
  cost_weights: [1.0, 1.0] # Weights for state dimensions in cost function
  dynamics: single_pendulum  # Choose between 'single_pendulum' or 'double_pendulum'
 
paths:
  training_data: "data/processed/training_data.npy"
  model: "models/neural_network.pt"

neural_networrk:
  nn_hidden_dim: 32
  nn_output_dim: 1
  nn_batch_size: 32
  nn_epochs: 100
  nn_learning_ratee: 0.001
  nn_output_ub: 1

training:
  initial_states:
  - [0.0, 0.0]
  - [0.1, 0.0]
  - [0.2, 0.0]
  - [-0.1, 0.0]
  - [-0.2, 0.0]
# ... add more as needed ...

mpc:
  short_horizon: 10 # M
  long_horizon: 20 # N
  trst_state:
  - [0.1, 0.0]
  - [0.2, 0.0]
  - [-0.1, 0.0]
# ... add more as needed ... 